name: Auto Build

on:
  push:
    branches: [ "master" ]  # 也可以改成其它分支或使用 ['*'] 表示所有分支
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      # 1. 生成 yyMMddHHmmss 格式的版本号
      - name: Generate Version
        id: genversion
        run: |
          VERSION="$(TZ=Asia/Shanghai date '+%y%m%d%H%M%S')"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Generated version: $VERSION"
      
      # 2. 检出代码
      - name: Check out
        uses: actions/checkout@v3
      
      # 3. 安装 .NET (这里以 .NET 8 为例)
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      # 4. 发布（publish）项目
      - name: Build (publish)
        run: dotnet publish ./PatchUpdater/PatchUpdater.csproj -c Release -r win-x64 --self-contained false
      
      # 5. 使用 softprops/action-gh-release 发布到 GitHub Releases
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: PatchUpdater-${{ env.VERSION }}
          name: PatchUpdater-${{ env.VERSION }}  # Release 显示名称
          body: |
            PatchUpdater 自动构建 (版本: ${{ env.VERSION }})
            - 构建时间 (北京时间): ${{ env.VERSION }}
          files: |
            ./bin/Release/net8.0/win-x64/publish/PatchUpdater.exe
            ./bin/Release/net8.0/win-x64/publish/PatchUpdater.pdb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
